{
  "k-nestjs-entity": {
    "prefix": "k-nestjs-entity\r",
    "body": [
      "\r",
      "import {\r",
      "    Entity,\r",
      "    Column,\r",
      "    PrimaryGeneratedColumn,\r",
      "    CreateDateColumn,\r",
      "    UpdateDateColumn,\r",
      "    DeleteDateColumn,\r",
      "    BeforeInsert,\r",
      "    BeforeUpdate,\r",
      "  } from 'typeorm';\r",
      "@Entity('demo', {orderBy: { CreateAt: 'DESC' } })\r",
      "export class DemoEntity {\r",
      "  @PrimaryGeneratedColumn('uuid')\r",
      "  id: string;\r",
      "  @Column({ type: 'text', collation: 'utf8_general_ci' })\r",
      "  Title: string;\r",
      "  @Column({ type: 'text', collation: 'utf8_general_ci' })\r",
      "  Mota: string;\r",
      "  @Column({ default: '' })\r",
      "  Slug: string;\r",
      "  @Column({collation: \"utf8_general_ci\",type:\"simple-json\",default: () => \"('{}')\" })\r",
      "  Image: string;\r",
      "  @Column({collation: \"utf8_general_ci\",type:\"simple-json\",default: () => \"('[]')\" })\r",
      "  Demo: string;\r",
      "  @Column({ default: '' })\r",
      "  Type: string;\r",
      "  @Column({ default: 1 })\r",
      "  Ordering: number;\r",
      "  @Column({ default: 0 })\r",
      "  Status: number;\r",
      "  @Column({ default: false })\r",
      "  isDelete: boolean;\r",
      "  @CreateDateColumn()\r",
      "  CreateAt: Date;\r",
      "  @UpdateDateColumn()\r",
      "  UpdateAt: Date;\r",
      "  @DeleteDateColumn()\r",
      "  DeleteAt: Date;\r",
      "  @Column({ nullable: true })\r",
      "  idCreate: string;\r",
      "  @BeforeInsert()\r",
      "  @BeforeUpdate()\r",
      "  checkTitle() {\r",
      "    if (!this.Title || this.Title.trim() === '') {\r",
      "      this.Title = 'Noname';\r",
      "    }\r",
      "  }\r",
      "}"
    ]
  },
  "k-nestjs-controller": {
    "prefix": "k-nestjs-controller\r",
    "body": [
      "\r",
      "import { Controller, Get, Post, Body, Patch, Param, Delete, Query } from '@nestjs/common';\r",
      "import {DemoService } from './demos.service';\r",
      "@Controller('demo')\r",
      "export class DemoController {\r",
      "  constructor(private readonly demoService:DemoService) {}\r",
      "\r",
      "  @Post()\r",
      "  create(@Body() data: any) {\r",
      "    return this.demoService.create(data);\r",
      "  }\r",
      "  @Get()\r",
      "  async findAll() {\r",
      "    return await this.demoService.findAll();\r",
      "  }\r",
      "  @Get('findid/:id')\r",
      "  async findOne(@Param('id') id: string) {\r",
      "    return await this.demoService.findid(id);\r",
      "  }\r",
      "  @Get('findslug/:slug')\r",
      "  async findslug(@Param('slug') slug: string) {\r",
      "    return await this.demoService.findslug(slug);\r",
      "  }\r",
      "  @Post('search')\r",
      "    async findQuery(@Body() SearchParams: any){\r",
      "      return await this.demoService.findQuery(SearchParams);\r",
      "  }\r",
      "  @Patch(':id')\r",
      "  update(@Param('id') id: string, @Body() data: any) {\r",
      "    return this.demoService.update(id, data);\r",
      "  }\r",
      "  @Delete(':id')\r",
      "  remove(@Param('id') id: string) {\r",
      "    return this.demoService.remove(id);\r",
      "  }\r",
      "}"
    ]
  },
  "k-nestjs-module": {
    "prefix": "k-nestjs-module\r",
    "body": [
      "\r",
      "import { Module } from '@nestjs/common';\r",
      "import { DemoService } from './demos.service';\r",
      "import { DemoController } from './demos.controller';\r",
      "import { TypeOrmModule } from '@nestjs/typeorm';\r",
      "import { DemoEntity } from './entities/demo.entity';\r",
      "@Module({\r",
      "  imports: [TypeOrmModule.forFeature([DemoEntity]), DemoModule],\r",
      "  controllers: [DemoController],\r",
      "  providers: [DemoService]\r",
      "})\r",
      "export class DemoModule {}\r",
      "\r",
      "\r",
      "\r",
      ""
    ]
  },
  "k-nestjs-service": {
    "prefix": "k-nestjs-service\r",
    "body": [
      "\r",
      "import { Injectable } from '@nestjs/common';\r",
      "import { InjectRepository } from '@nestjs/typeorm';\r",
      "import { Like, Repository } from 'typeorm';\r",
      "import { DemoEntity } from './entities/demo.entity';\r",
      "@Injectable()\r",
      "export class DemoService {\r",
      "  constructor(\r",
      "    @InjectRepository(DemoEntity)\r",
      "    private DemoRepository: Repository<DemoEntity>\r",
      "  ) { }\r",
      "  async create(data: any) {\r",
      "    const check = await this.findSHD(data)\r",
      "    if(!check) {\r",
      "      this.DemoRepository.create(data);\r",
      "      return await this.DemoRepository.save(data);\r",
      "    }\r",
      "    else {\r",
      "      return { error: 1001, data: \"Trùng Dữ Liệu\" }\r",
      "    }\r",
      "\r",
      "  }\r",
      "  async findAll() {\r",
      "    return await this.DemoRepository.find({where: {isDelete: false}});\r",
      "  }\r",
      "  async findid(id: string) {\r",
      "    return await this.DemoRepository.findOne({ where: { id: id } });\r",
      "  }\r",
      "  async findSHD(data: any) {\r",
      "    return await this.DemoRepository.findOne({\r",
      "      where: {\r",
      "        Title: data.Title,\r",
      "        Type: data.Type\r",
      "      },\r",
      "    });\r",
      "  }\r",
      "  async findslug(Title: any) {\r",
      "    return await this.DemoRepository.findOne({\r",
      "      where: { Title: Title },\r",
      "    });\r",
      "  }\r",
      "  async findPagination(page: number, perPage: number) {\r",
      "    const skip = (page - 1) * perPage;\r",
      "    const totalItems = await this.DemoRepository.count();\r",
      "    const demos = await this.DemoRepository.find({ skip, take: perPage });\r",
      "    return {\r",
      "      currentPage: page,\r",
      "      perPage,\r",
      "      totalItems,\r",
      "      totalPages: Math.ceil(totalItems / perPage),\r",
      "      data: demos,\r",
      "    };\r",
      "  }\r",
      "  async findQuery(params: any) {\r",
      "    console.error(params);\r",
      "    const queryBuilder = this.DemoRepository.createQueryBuilder('demo');\r",
      "    if (params.hasOwnProperty('Batdau') && params.hasOwnProperty('Ketthuc')) {\r",
      "      queryBuilder.andWhere('demo.CreateAt BETWEEN :startDate AND :endDate', {\r",
      "        startDate: params.Batdau,\r",
      "        endDate: params.Ketthuc,\r",
      "      });\r",
      "    }\r",
      "    if (params.hasOwnProperty('Title')) {\r",
      "      queryBuilder.andWhere('demo.Title LIKE :Title', { Title: `%\\${params.Title}%` });\r",
      "    }\r",
      "    if (params.hasOwnProperty('Type')) {\r",
      "      queryBuilder.andWhere('demo.Type LIKE :Type', { Type: `\\${params.Type}` });\r",
      "    }\r",
      "    if (params.hasOwnProperty('idDelete')) {\r",
      "      queryBuilder.andWhere('demo.idDelete LIKE :idDelete', { idDelete: params.idDelete });\r",
      "    }\r",
      "    const [items, totalCount] = await queryBuilder\r",
      "      .limit(params.pageSize || 10) // Set a default page size if not provided\r",
      "      .offset(params.pageNumber * params.pageSize || 0)\r",
      "      .getManyAndCount();\r",
      "    console.log(items, totalCount);\r",
      "\r",
      "    return { items, totalCount };\r",
      "  }\r",
      "  async update(id: string, UpdateDemoDto: any) {\r",
      "    await this.DemoRepository.save(UpdateDemoDto);\r",
      "    return await this.DemoRepository.findOne({ where: { id: id } });\r",
      "  }\r",
      "  async remove(id: string) {\r",
      "    await this.DemoRepository.delete(id);\r",
      "    return { deleted: true };\r",
      "  }\r",
      "}\r",
      ""
    ]
  },
  "k-angualar-dialogwithdata": {
    "prefix": "k-angualar-dialogwithdata\r",
    "body": [
      "\r",
      "CreateMenu() {\r",
      "  const dialogRef =  this.dialog.open(CreatedialogComponent,{\r",
      "    data:{Parent:this.ListMenu}\r",
      "  }\r",
      "  );\r",
      "   dialogRef.afterClosed().subscribe((result) => {\r",
      "     if (result!='false') {     \r",
      "       this._MenuService.CreateMenu(result.Detail).then(async ()=>{\r",
      "        await this._MenuService.getAllMenu()\r",
      "        this.menusChanged.emit(this._MenuService.ListMenu() );\r",
      "         this._NotifierService.notify(\"success\",\"Tạo Mới Thành Công\")\r",
      "       });\r",
      "\r",
      "     }\r",
      "     else {\r",
      "       console.log('The dialog was closed');\r",
      "        console.log(result.Detail);  \r",
      "     }\r",
      "   });\r",
      " }\r",
      " \r",
      "Update(item:any): void {\r",
      "  item.Parent = this.ListMenu();\r",
      "  const dialogRef = this.dialog.open(UpdatedialogComponent,{data:item});\r",
      "  dialogRef.afterClosed().subscribe((result) => {\r",
      "    if (result!=\"false\") {\r",
      "      this.UpdateEmit.emit(result.Detail)\r",
      "    }\r",
      "  });\r",
      "}\r",
      "Delete(item:any): void {\r",
      "  const dialogRef = this.dialog.open(DeletedialogComponent,{data:item});\r",
      "  dialogRef.afterClosed().subscribe((result) => {\r",
      "    if (result!=\"false\") {\r",
      "      this.DeleteEmit.emit(result.Detail)\r",
      "    }\r",
      "  });\r",
      "}\r",
      "\r",
      "\r",
      "\r",
      "//CreateDialog\r",
      "Detail:any = {}\r",
      "constructor(\r",
      "  public dialogRef: MatDialogRef<CreatedialogComponent>,\r",
      "  @Inject(MAT_DIALOG_DATA) public data: any\r",
      ") {\r",
      "  console.log(data);    \r",
      "}\r",
      "FillSlug() {\r",
      "  this.Detail.Slug = convertToSlug(this.Detail.Title)\r",
      "}\r",
      "onSaveClick(): void {\r",
      "  // Pass Detail data back to the ConfigComponent\r",
      "  this.dialogRef.close({ Detail: this.Detail });\r",
      "}\r",
      "\r",
      "//UpdateDialog\r",
      "Detail:any = {}\r",
      "constructor(\r",
      "  public dialogRef: MatDialogRef<UpdatedialogComponent>,\r",
      "  @Inject(MAT_DIALOG_DATA) public data: any\r",
      ") {\r",
      "  this.Detail = data ;   \r",
      "}\r",
      "FillSlug() {\r",
      "  this.Detail.Slug = convertToSlug(this.Detail.Title)\r",
      "}\r",
      "onSaveClick(): void {\r",
      "  // Pass Detail data back to the ConfigComponent\r",
      "  this.dialogRef.close({ Detail: this.Detail });\r",
      "}\r",
      "\r",
      "//DeleteDialog\r",
      "Detail:any = {}\r",
      "constructor(\r",
      "  public dialogRef: MatDialogRef<DeletedialogComponent>,\r",
      "  @Inject(MAT_DIALOG_DATA) public data: any\r",
      ") { \r",
      "  this.Detail = data\r",
      "}\r",
      "onClick(): void {\r",
      "  this.dialogRef.close({ Detail: this.Detail });\r",
      "}"
    ]
  },
  "k-angular-service": {
    "prefix": "k-angular-service\r",
    "body": [
      "\r",
      "\r",
      "\r",
      "import { Injectable, signal } from '@angular/core';\r",
      "import { BehaviorSubject, map, Observable, of, switchMap, take } from 'rxjs';\r",
      "import { environment } from '../../environments/environment';\r",
      "@Injectable({\r",
      "  providedIn: 'root'\r",
      "})\r",
      "export class DemoService {\r",
      "  private _demos: BehaviorSubject<any[] | null> = new BehaviorSubject<any[] | null>(null);\r",
      "  private _demo: BehaviorSubject<any | null> = new BehaviorSubject<any | null>(null);\r",
      "  private _totalCount: BehaviorSubject<any | null> = new BehaviorSubject<any | null>(null);\r",
      "  get demos$(): Observable<any[] | null> {\r",
      "    return this._demos.asObservable();\r",
      "  }\r",
      "  get demo$(): Observable<any | null> {\r",
      "    return this._demo.asObservable();\r",
      "  }\r",
      "  get totalCount$(): Observable<any | null> {\r",
      "    return this._totalCount.asObservable();\r",
      "  }\r",
      "  ListDemo = signal<any[]>([]);\r",
      "  Demo = signal<any>({});\r",
      "  isLoading = signal<boolean>(false);\r",
      "  constructor() {}\r",
      "  async getDrive() {\r",
      "    try {\r",
      "      const options = {\r",
      "        method:'GET',\r",
      "        headers: {\r",
      "          'Content-Type': 'application/json',\r",
      "        },\r",
      "      };\r",
      "    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/1sofaJI5e9s6TMIvDTk57HktSsumlXPjFSqmwkGD-9zU/values/Thang1?key=AIzaSyCWh10EgrjVBm8qKpnsGOgXrIsT5uqroMc`,options);\r",
      "    const data = await response.json();\r",
      "    return data;\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async getAllDemo() {\r",
      "    try {\r",
      "      this.isLoading.set(true)\r",
      "      const options = {\r",
      "        method:'GET',\r",
      "        headers: {\r",
      "          'Content-Type': 'application/json',\r",
      "        },\r",
      "      };\r",
      "          const response = await fetch(`${environment.APIURL}/demo`,options);\r",
      "          const data = await response.json();         \r",
      "          this.ListDemo.set(data)\r",
      "          this.isLoading.set(false)\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async getDemoBySlug(Slug:any) {\r",
      "    try {\r",
      "      const options = {\r",
      "        method:'GET',\r",
      "        headers: {\r",
      "          'Content-Type': 'application/json',\r",
      "        },\r",
      "      };\r",
      "          const response = await fetch(`${environment.APIURL}/demo/findslug/${Slug}`,options);\r",
      "          const data = await response.json();\r",
      "          this._demo.next(data)\r",
      "          return data;\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async getDemoByid(id:any) {\r",
      "    try {\r",
      "      const options = {\r",
      "        method:'GET',\r",
      "        headers: {\r",
      "          'Content-Type': 'application/json',\r",
      "        },\r",
      "      };\r",
      "          const response = await fetch(`${environment.APIURL}/demo/findid/${id}`,options);\r",
      "          if (!response.ok) {\r",
      "            throw new Error(`HTTP error! status: ${response.status}`);\r",
      "          }\r",
      "          const data = await response.json();\r",
      "          this._demo.next(data)\r",
      "          return data;\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async SearchDemo(SearchParams:any) {\r",
      "    try {\r",
      "      const options = {\r",
      "        method:'POST',\r",
      "        headers: {\r",
      "          'Content-Type': 'application/json',\r",
      "        },\r",
      "        body: JSON.stringify(SearchParams),\r",
      "      };\r",
      "          const response = await fetch(`${environment.APIURL}/demo/search`,options);\r",
      "          if (!response.ok) {\r",
      "            throw new Error(`HTTP error! status: ${response.status}`);\r",
      "          }\r",
      "          const data = await response.json();\r",
      "          this._demos.next(data.items)\r",
      "          this._totalCount.next(data.totalCount)\r",
      "          return data;\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async CreateDemo(item:any) {\r",
      "    try {\r",
      "      this.isLoading.set(true)\r",
      "        const options = {\r",
      "            method:'POST',\r",
      "            headers: {\r",
      "              'Content-Type': 'application/json',\r",
      "            },\r",
      "            body: JSON.stringify(item),\r",
      "          };\r",
      "          const response = await fetch(`${environment.APIURL}/demo`, options);\r",
      "          if (!response.ok) {\r",
      "            throw new Error(`HTTP error! status: ${response.status}`);\r",
      "          }\r",
      "          const data = await response.json();\r",
      "          this.Demo.set(data)\r",
      "          this.isLoading.set(false)\r",
      "          console.log(data);\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async SyncDemo(item:any) {\r",
      "    try {\r",
      "        const options = {\r",
      "            method:'POST',\r",
      "            headers: {\r",
      "              'Content-Type': 'application/json',\r",
      "            },\r",
      "            body: JSON.stringify(item),\r",
      "          };\r",
      "          const response = await fetch(`${environment.APIURL}/demo/sync`, options);\r",
      "          if (!response.ok) {\r",
      "            throw new Error(`HTTP error! status: ${response.status}`);\r",
      "          }\r",
      "          const data = await response.json();\r",
      "          console.log(data);\r",
      "\r",
      "          return data\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "  async UpdateDemo(item:any) {\r",
      "    try {\r",
      "        const options = {\r",
      "            method:'PATCH',\r",
      "            headers: {\r",
      "              'Content-Type': 'application/json',\r",
      "            },\r",
      "            body: JSON.stringify(item),\r",
      "          };\r",
      "          const response = await fetch(`${environment.APIURL}/demo/${item.id}`, options);\r",
      "          if (!response.ok) {\r",
      "            throw new Error(`HTTP error! status: ${response.status}`);\r",
      "          }\r",
      "          const updatedDemo = await response.json();\r",
      "          // Cập nhật demo hiện tại\r",
      "          this.Demo.set(updatedDemo);\r",
      "\r",
      "          // Cập nhật danh sách demo\r",
      "          const currentDemos = this.ListDemo();\r",
      "          const updatedDemos = currentDemos.map((v: any) =>\r",
      "            v.id === updatedDemo.id ? updatedDemo : v\r",
      "          );\r",
      "          this.ListDemo.set(updatedDemos);\r",
      "          return updatedDemo;\r",
      "\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "\r",
      "  async DeleteDemo(item:any) {\r",
      "    try {\r",
      "        const options = {\r",
      "            method:'DELETE',\r",
      "            headers: {\r",
      "              'Content-Type': 'application/json',\r",
      "            },\r",
      "          };\r",
      "          const response = await fetch(`${environment.APIURL}/demo/${item.id}`, options);\r",
      "          return await response.json();\r",
      "      } catch (error) {\r",
      "          return console.error(error);\r",
      "      }\r",
      "  }\r",
      "}\r",
      ""
    ]
  },
  "k-angular-response-status": {
    "prefix": "k-angular-response-status\r",
    "body": [
      "\r",
      "if (!response.ok) {\r",
      "  if (response.status === 401) {\r",
      "    const result  = JSON.stringify({ code:response.status,title:'Vui lòng đăng nhập lại' })\r",
      "    this.router.navigate(['/errorserver'], { queryParams: {data:result}});\r",
      "    this.Dangxuat()\r",
      "  } else if (response.status === 403) {\r",
      "    const result  = JSON.stringify({ code:response.status,title:'Bạn không có quyền truy cập' })\r",
      "    this.router.navigate(['/errorserver'], { queryParams: {data:result}});\r",
      "    this.Dangxuat()\r",
      "  } else if (response.status === 500) {\r",
      "    const result  = JSON.stringify({ code:response.status,title:'Lỗi máy chủ, vui lòng thử lại sau' })\r",
      "    this.router.navigate(['/errorserver'], { queryParams: {data:result}});\r",
      "  } else {\r",
      "    const result  = JSON.stringify({ code:response.status,title:'Lỗi không xác định' })\r",
      "    this.router.navigate(['/errorserver'], { queryParams: {data:result}});\r",
      "  }\r",
      "}"
    ]
  },
  "k-angular-routerdetail": {
    "prefix": "k-angular-routerdetail",
    "body": [
      "constructor(",
      "    private router:ActivatedRoute,",
      "    private fb: FormBuilder",
      "  ){}",
      "  _UsersService:UsersService = inject(UsersService)",
      "  Detail:any={}",
      "  ngOnInit(): void {",
      "    this.router.paramMap.subscribe(async (data:any)=>{",
      "      const id = data.params['id']",
      "       await this._UsersService.getUserByid(id)",
      "       this.Detail = this._UsersService.User()",
      "    })   ",
      "  }",
      ""
    ]
  },
  "k-angular-generate-component": {
    "prefix": "k-angular-cli",
    "body": [
      "npx ng g c taskupdatedialog --skip-tests --standalone",
      "npx ng g s taskupdatedialog --skip-tests",
      "npx ng g s taskupdatedialog --skip-tests",
      "npx ng g environments"
    ]
  },
  "k-angular-storage": {
    "prefix": "k-angular-storage",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "import { StorageService } from './storage.service';",
      "",
      "@Component({",
      "  selector: 'app-root',",
      "  templateUrl: './app.component.html',",
      "  styleUrls: ['./app.component.css'],",
      "})",
      "export class AppComponent implements OnInit {",
      "  constructor(private storageService: StorageService) {}",
      "",
      "  ngOnInit(): void {",
      "    // Lưu dữ liệu",
      "    this.storageService.setItem('user', { id: 1, name: 'JohnDoe' });",
      "",
      "    // Lấy dữ liệu",
      "    const user = this.storageService.getItem('user');",
      "    console.log(user);",
      "",
      "    // Xóa dữ liệu",
      "    this.storageService.removeItem('user');",
      "  }",
      "}",
      ""
    ]
  },
  "k-angular-notification": {
    "prefix": "k-angular-notification",
    "body": [
      "this._snackBar.open('Cập Nhật Thành Công', '', {",
      "  duration: 1000,",
      "  horizontalPosition: \"end\",",
      "  verticalPosition: \"top\",",
      "  panelClass: ['snackbar-success'],",
      "});"
    ]
  },
  "k-angular-material-table": {
    "prefix": "k-angular-material-table\r",
    "body": [
      "\r",
      "imports: [\r",
      "  MatFormFieldModule, \r",
      "  MatInputModule, \r",
      "  MatTableModule, \r",
      "  MatSortModule, \r",
      "  MatPaginatorModule,\r",
      "  MatMenuModule,\r",
      "  MatSidenavModule,\r",
      "  RouterOutlet,\r",
      "  MatIconModule,\r",
      "  MatButtonModule,\r",
      " ],\r",
      "Detail:any={}\r",
      "@Input() Giohangs:any[]=[]\r",
      "  dataSource!: MatTableDataSource<any>;\r",
      "  displayedColumns: string[] = [\r",
      "    'STT',\r",
      "    'email', \r",
      "    'Hoten', \r",
      "    'SDT',\r",
      "    'CreateAt',\r",
      "    'field6',\r",
      "  ];\r",
      "  ColumnName:any={\r",
      "    'STT':'STT',\r",
      "    'Hoten':'Họ Tên', \r",
      "    'email':'Email', \r",
      "    'SDT':'SDT',\r",
      "    'CreateAt':'Ngày Tạo',\r",
      "    'field6':'Hành Động',\r",
      "  }\r",
      "  @ViewChild(MatPaginator) paginator!: MatPaginator;\r",
      "  @ViewChild(MatSort) sort!: MatSort;\r",
      "    constructor(\r",
      "      private _breakpointObserver: BreakpointObserver,\r",
      "      private _router: Router,\r",
      "    ) {}\r",
      "    ngOnInit(): void {\r",
      "      this.dataSource = new MatTableDataSource(ListGiohang); \r",
      "      this.dataSource.paginator = this.paginator;\r",
      "      this.dataSource.sort = this.sort;        \r",
      "    }\r",
      "    ngAfterViewInit() { \r",
      "      this.dataSource.paginator = this.paginator;\r",
      "      this.dataSource.sort = this.sort;\r",
      "      this.paginator._intl.itemsPerPageLabel = 'Số lượng 1 trang';\r",
      "      this.paginator._intl.nextPageLabel = 'Tiếp Theo';\r",
      "      this.paginator._intl.previousPageLabel = 'Về Trước';\r",
      "      this.paginator._intl.firstPageLabel = 'Trang Đầu';\r",
      "      this.paginator._intl.lastPageLabel = 'Trang Cuối';\r",
      "      this.paginator.pageSize = 30\r",
      "    }\r",
      "  \r",
      "    applyFilter(event: Event) {\r",
      "      const filterValue = (event.target as HTMLInputElement).value;\r",
      "      this.dataSource.filter = filterValue.trim().toLowerCase();\r",
      "  \r",
      "      if (this.dataSource.paginator) {\r",
      "        this.dataSource.paginator.firstPage();\r",
      "      }\r",
      "    }"
    ]
  }
}